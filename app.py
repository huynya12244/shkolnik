import os
import sqlite3
import random
import string
import threading
from flask import Flask, request, jsonify
import telebot
from dotenv import load_dotenv
import xlsxwriter

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)
app.config['DATABASE'] = 'database/bot.db'

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = app.config['DATABASE']

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEMP_DIR = "temp"
os.makedirs(TEMP_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = '7695860708:AAHDA-80C8Pn9rixjmhPSRwhXvEsi82WQ6w'
if not BOT_TOKEN:
    raise Exception("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
bot = telebot.TeleBot(BOT_TOKEN)

# –î–ª—è –∑–∞—â–∏—Ç—ã –ë–î –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
db_lock = threading.Lock()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}  # {chat_id: state}

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id TEXT UNIQUE NOT NULL,
            chat_id TEXT NOT NULL,
            username TEXT,
            name TEXT,
            last_name TEXT,
            promo_code TEXT NOT NULL,
            referrals_count INTEGER DEFAULT 0,
            paid_referrals_count INTEGER DEFAULT 0,
            referral_income REAL DEFAULT 0,
            balance REAL DEFAULT 0,
            invited_by_username TEXT,
            role TEXT DEFAULT 'user',
            used_promo BOOLEAN DEFAULT 0
        )
    ''')
    cursor.execute("PRAGMA table_info(users)")
    columns = [col[1] for col in cursor.fetchall()]
    if 'paid_referrals_count' not in columns:
        cursor.execute('ALTER TABLE users ADD COLUMN paid_referrals_count INTEGER DEFAULT 0')
    if 'referral_income' not in columns:
        cursor.execute('ALTER TABLE users ADD COLUMN referral_income REAL DEFAULT 0')
    if 'balance' not in columns:
        cursor.execute('ALTER TABLE users ADD COLUMN balance REAL DEFAULT 0')
    if 'invited_by_username' not in columns:
        cursor.execute('ALTER TABLE users ADD COLUMN invited_by_username TEXT')
    conn.commit()
    conn.close()

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î ===
def generate_promo_code(length=8):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

def add_user_if_not_exists(telegram_id, chat_id, name, last_name, username=None, invited_by_username=None):
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        try:
            promo_code = generate_promo_code()
            cursor.execute('''
                INSERT INTO users (
                    telegram_id, chat_id, name, last_name, username, promo_code, invited_by_username
                ) VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (str(telegram_id), str(chat_id), name, last_name, username, promo_code, invited_by_username))
            conn.commit()
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º {promo_code}")
        except sqlite3.IntegrityError:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        finally:
            conn.close()

def is_valid_promo(promo_code):
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT telegram_id, username FROM users WHERE promo_code = ?', (promo_code,))
        result = cursor.fetchone()
        conn.close()
        if result:
            return {'telegram_id': result[0], 'username': result[1]}
        return None

def has_used_promo(telegram_id):
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT used_promo FROM users WHERE telegram_id = ?', (str(telegram_id),))
        result = cursor.fetchone()
        conn.close()
        return bool(result[0]) if result else False

def mark_promo_used(telegram_id):
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET used_promo = 1 WHERE telegram_id = ?', (str(telegram_id),))
        conn.commit()
        conn.close()

def increase_referral(owner_telegram_id):
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET referrals_count = referrals_count + 1 WHERE telegram_id = ?', (str(owner_telegram_id),))
        conn.commit()
        conn.close()

def update_referral_payment(inviter_id, amount):
    income = amount * 0.5  # 50%
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users 
            SET paid_referrals_count = paid_referrals_count + 1, 
                referral_income = referral_income + ?
            WHERE telegram_id = ?
        ''', (income, inviter_id))
        conn.commit()
        conn.close()

def get_all_users_data():
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users")
        rows = cursor.fetchall()
        cursor.execute("PRAGMA table_info(users)")
        columns = [desc[1] for desc in cursor.description]
        conn.close()
    data = [dict(zip(columns, row)) for row in rows]
    return data

def get_referrals_count(telegram_id):
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT referrals_count, paid_referrals_count, referral_income 
            FROM users 
            WHERE telegram_id = ?
        ''', (str(telegram_id),))
        result = cursor.fetchone()
        conn.close()
        return result or (0, 0, 0)

def send_broadcast_message(message_text):
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT chat_id FROM users')
        rows = cursor.fetchall()
        conn.close()
    for row in rows:
        try:
            bot.send_message(row[0], message_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {row[0]}: {e}")

# === Flask –º–∞—Ä—à—Ä—É—Ç—ã ===
@app.route('/')
def index():
    return "Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

@app.route('/add_user', methods=['POST'])
def add_user_to_db():
    data = request.get_json()
    telegram_id = data.get('telegram_id')
    chat_id = data.get('chat_id')
    name = data.get('name')
    last_name = data.get('last_name', "")
    username = data.get('username')

    if not telegram_id or not chat_id or not name:
        return jsonify({"error": "Missing required fields"}), 400

    try:
        with db_lock:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            promo_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
            cursor.execute('''
                INSERT INTO users (
                    telegram_id, chat_id, name, last_name, username, promo_code
                ) VALUES (?, ?, ?, ?, ?, ?)
            ''', (str(telegram_id), str(chat_id), name, last_name, username, promo_code))
            conn.commit()
            conn.close()
        return jsonify({
            "status": "success",
            "message": f"User {telegram_id} added with promo code {promo_code}"
        }), 201
    except sqlite3.IntegrityError:
        return jsonify({"error": "User already exists"}), 409

# === Telegram –∫–æ–º–∞–Ω–¥—ã –∏ –ª–æ–≥–∏–∫–∞ ===
@bot.message_handler(commands=['start'])
def start(message):
    user = message.from_user
    telegram_id = user.id
    chat_id = message.chat.id
    name = user.first_name
    last_name = user.last_name or ""
    username = f"@{user.username}" if user.username else None
    add_user_if_not_exists(telegram_id, chat_id, name, last_name, username)
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(telebot.types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    try:
        with open('img/start_img.png', 'rb') as photo:
            bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption="üëã –ü—Ä–∏–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã ExamBot!\n–í–≤–æ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–ª—É—á–∞–π –≤—Å–µ —Å–≤–µ–∂–∏–µ –æ—Ç–≤–µ—Ç—ã –∑–∞ –ø–∞—Ä—É —á–∞—Å–æ–≤ –¥–æ —ç–∫–∑–∞–º–µ–Ω–∞, —á—Ç–æ–±—ã —Å–ø–æ–∫–æ–π–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –∏–¥—Ç–∏ –Ω–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ!",
                reply_markup=keyboard
            )
    except Exception as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ...")
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:", reply_markup=keyboard)
    user_states[message.chat.id] = 'awaiting_promo'

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@bot.message_handler(func=lambda m: user_states.get(m.chat.id) == 'awaiting_promo')
def handle_promo_input(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_info, inline_kb, reply_kb = get_main_menu(user_id)
        bot.send_message(chat_id, user_info, reply_markup=inline_kb)
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_kb)
        user_states.pop(chat_id, None)
        return
    entered_promo = message.text.strip()
    owner_data = is_valid_promo(entered_promo)
    if not owner_data:
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(telebot.types.KeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"))
        keyboard.add(telebot.types.KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é"))
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é?", reply_markup=keyboard)
        user_states[chat_id] = 'invalid_promo'
        return
    if has_used_promo(user_id):
        user_info, inline_kb, reply_kb = get_main_menu(user_id)
        bot.send_message(chat_id, user_info, reply_markup=inline_kb)
        bot.send_message(chat_id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ.", reply_markup=reply_kb)
        user_states.pop(chat_id, None)
        return
    increase_referral(owner_data['telegram_id'])
    mark_promo_used(user_id)
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET invited_by_username = ? WHERE telegram_id = ?', (owner_data['username'], user_id))
        conn.commit()
        conn.close()
    user_info, inline_kb, reply_kb = get_main_menu(user_id)
    bot.send_message(chat_id, user_info, reply_markup=inline_kb)
    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç. –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=reply_kb)
    user_states.pop(chat_id, None)

def get_main_menu(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT name, last_name, promo_code, referrals_count
        FROM users
        WHERE telegram_id = ?
    ''', (str(user_id),))
    result = cursor.fetchone()
    conn.close()
    if not result:
        return "", telebot.types.ReplyKeyboardMarkup(), telebot.types.InlineKeyboardMarkup()
    name, last_name, promo_code, referrals_count = result
    user_info = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {name}\n"
        f"–§–∞–º–∏–ª–∏—è: {last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"–ü—Ä–æ–º–æ–∫–æ–¥: {promo_code}\n"
        f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ: {referrals_count}"
    )
    inline_keyboard = telebot.types.InlineKeyboardMarkup()
    inline_keyboard.add(
        telebot.types.InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"copy_promo:{promo_code}")
    )
    main_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    if is_admin(user_id):
        main_keyboard.add(telebot.types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
        main_keyboard.add(telebot.types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π"))
        main_keyboard.add(telebot.types.KeyboardButton("–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"))
    else:
        main_keyboard.add(telebot.types.KeyboardButton("1. –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞"))
        main_keyboard.add(telebot.types.KeyboardButton("2. –ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã"))
        main_keyboard.add(telebot.types.KeyboardButton("3. –û –Ω–∞—Å"))
        main_keyboard.add(telebot.types.KeyboardButton("4. –ö–∞—Ç–∞–ª–æ–≥"))
        main_keyboard.add(telebot.types.KeyboardButton("5. –£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –∫ –Ω–∞–º –Ω–∞ —Ä–∞–±–æ—Ç—É"))
        main_keyboard.add(telebot.types.KeyboardButton("6. –ö–æ–Ω—Ç–∞–∫—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"))
    return user_info, inline_keyboard, main_keyboard

def is_admin(telegram_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT role FROM users WHERE telegram_id = ?', (str(telegram_id),))
    result = cursor.fetchone()
    conn.close()
    return result and result[0] == 'admin'

@bot.callback_query_handler(func=lambda call: call.data.startswith("copy_promo:"))
def handle_copy_promo(call):
    promo_code = call.data.split(":")[1]
    bot.answer_callback_query(call.id, text=f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!", show_alert=False)
    bot.send_message(call.message.chat.id, f"`{promo_code}`", parse_mode="Markdown")

# === –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def send_users_excel(message):
    data = get_all_users_data()
    file_path = os.path.join(TEMP_DIR, "users.xlsx")
    workbook = xlsxwriter.Workbook(file_path)
    worksheet = workbook.add_worksheet()
    headers = data[0].keys() if data else []
    worksheet.write_row(0, 0, headers)
    for row_num, row_data in enumerate(data):
        worksheet.write_row(row_num + 1, 0, row_data.values())
    workbook.close()
    with open(file_path, "rb") as f:
        bot.send_document(message.chat.id, f)

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π")
def request_user_id(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    user_states[message.chat.id] = 'awaiting_user_id_for_referrals'

@bot.message_handler(func=lambda m: user_states.get(m.chat.id) == 'awaiting_user_id_for_referrals')
def show_referrals_count(message):
    user_id = message.text.strip()
    rc, prc, ri = get_referrals_count(user_id)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ: {rc}")
    bot.send_message(message.chat.id, f"–û–ø–ª–∞—Ç–∏–ª–∏: {prc}")
    bot.send_message(message.chat.id, f"–û–±—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {round(ri, 2)} —Ä—É–±.")
    user_info, inline_kb, reply_kb = get_main_menu(message.from_user.id)
    bot.send_message(message.chat.id, user_info, reply_markup=inline_kb)
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_kb)
    user_states.pop(message.chat.id, None)

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
def request_broadcast_message(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    user_states[message.chat.id] = 'awaiting_broadcast_message'

@bot.message_handler(func=lambda m: user_states.get(m.chat.id) == 'awaiting_broadcast_message')
def do_broadcast(message):
    text = message.text
    bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")
    send_broadcast_message(text)
    bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    user_info, inline_kb, reply_kb = get_main_menu(message.from_user.id)
    bot.send_message(message.chat.id, user_info, reply_markup=inline_kb)
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_kb)
    user_states.pop(message.chat.id, None)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ –º–µ–Ω—é ===
@bot.message_handler(func=lambda m: m.text == "1. –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞")
def our_group(message): bot.reply_to(message, "–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É: https://t.me/+phaj3N7gq6wxODQy") 

@bot.message_handler(func=lambda m: m.text == "2. –ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã")
def reviews(message): bot.reply_to(message, "üí¨ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–∞—à–∏—Ö –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ @otzivieoge ‚Äî –æ–Ω–∏ —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞")

@bot.message_handler(func=lambda m: m.text == "3. –û –Ω–∞—Å")
def about_us(message): bot.reply_to(message, "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 2021 –≥–æ–¥–∞ –∏ —É–∂–µ –ø–æ–º–æ–≥–ª–∏ –ë–û–õ–ï–ï 500 —Ä–µ–±—è—Ç–∞–º –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ –≤—É–∑—ã —Å –æ—Ç–ª–∏—á–Ω—ã–º–∏ –±–∞–ª–ª–∞–º–∏\n\n–ü–û–ß–ï–ú–£ –ú–´ –õ–£–ß–®–ï ‚ÄºÔ∏è\n‚ûñ–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç ¬´–≥–æ—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤¬ª –æ—Ç –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤, –º—ã –ø–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ö–ò–ú –æ–¥–Ω–∏ –∏–∑ –ø–µ—Ä–≤—ã—Ö –∑–∞ 10-12 —á–∞—Å–æ–≤ –¥–æ —ç–∫–∑–∞–º–µ–Ω–∞;\n‚ûñ–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ —Ä–µ—à–∞–µ—Ç –∏—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ 2‚Äì3 —á–∞—Å–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –≤–∞–º —Å–≤–µ–∂–∏–µ, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è;\n‚ûñ–ú—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –†–£–ß–ê–ï–ú–°–Ø –ó–ê –†–ï–ó–£–õ–¨–¢–ê–¢: –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–µ—Ä–Ω—ë–º –≤–∞–º –ø–æ–ª–Ω—É—é –æ–ø–ª–∞—Ç—É –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤;\n–ë–æ–∏—à—å—Å—è, —á—Ç–æ –Ω–µ —Å–¥–∞—à—å? –ü–ï–†–ï–°–¢–†–ê–•–£–ô–°–Ø –° –ù–ê–ú–ò! –ú—ã –ø–æ–Ω–∏–º–∞–µ–º –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ—Ç —ç–∫–∑–∞–º–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–∂–µ–Ω –¥–ª—è –≤–∞—Å.")

@bot.message_handler(func=lambda m: m.text == "4. –ö–∞—Ç–∞–ª–æ–≥")
def catalog(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–û–ì–≠"), telebot.types.KeyboardButton("–ï–ì–≠"))
    markup.add(telebot.types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["–û–ì–≠", "–ï–ì–≠"])
def select_city(message):
    cities = [
        "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
        "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–£—Ñ–∞", "–ß–µ–ª—è–±–∏–Ω—Å–∫"
    ]
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for city in cities:
        markup.add(telebot.types.KeyboardButton(city))
    markup.add(telebot.types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:\n(–µ—Å–ª–∏ –≤–∞—à–µ–≥–æ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É)", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "—Ñ–∏–∑–∏–∫–∞", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"])
def show_price(message):
    prices = {
        "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": 3000,
        "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫": 2800,
        "—Ñ–∏–∑–∏–∫–∞": 3500,
        "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": 4000
    }
    price = prices.get(message.text.lower(), 0)
    bot.reply_to(message, f"–¶–µ–Ω–∞ –∑–∞ {message.text}: {price} —Ä—É–±.\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")

@bot.message_handler(func=lambda m: m.text == "5. –£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –∫ –Ω–∞–º –Ω–∞ —Ä–∞–±–æ—Ç—É")
def job(message): bot.reply_to(message, "–•–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @Mikhal_l")

@bot.message_handler(func=lambda m: m.text == "6. –ö–æ–Ω—Ç–∞–∫—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
def contact_manager(message): bot.reply_to(message, "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @Mikhal_l")

@bot.message_handler(func=lambda m: m.text == "–ù–∞–∑–∞–¥")
def go_back(message):
    user_id = message.from_user.id
    user_info, inline_kb, reply_kb = get_main_menu(user_id)
    bot.send_message(message.chat.id, user_info, reply_markup=inline_kb)
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_kb)

# === –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
@bot.message_handler(commands=['setadmin'])
def set_admin(message):
    requester_id = str(message.from_user.id)
    if not is_admin(requester_id):
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    args = message.text.split()
    if len(args) != 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setadmin <telegram_id>")
        return
    target_id = args[1]
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET role = "admin" WHERE telegram_id = ?', (target_id,))
        conn.commit()
        conn.close()
    bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

@bot.message_handler(commands=['setbalance'])
def set_balance(message):
    requester_id = str(message.from_user.id)
    if not is_admin(requester_id):
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    args = message.text.split()
    if len(args) != 3:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setbalance @username 3200")
        return
    username = args[1].lower().strip()
    try:
        amount = float(args[2])
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")
        return
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT telegram_id FROM users WHERE username = ?', (username,))
        result = cursor.fetchone()
        conn.close()
    if not result:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    telegram_id = result[0]
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET balance = ? WHERE telegram_id = ?', (amount, telegram_id))
        conn.commit()
        conn.close()
    bot.reply_to(message, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount} —Ä—É–±.")

# === –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel ===
def create_users_excel_file(file_path):
    data = get_all_users_data()
    workbook = xlsxwriter.Workbook(file_path)
    worksheet = workbook.add_worksheet()
    if data:
        headers = data[0].keys()
        worksheet.write_row(0, 0, headers)
        for row_num, row_data in enumerate(data):
            worksheet.write_row(row_num + 1, 0, row_data.values())
    workbook.close()

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == '__main__':
    init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    bot_thread = threading.Thread(target=bot.polling, kwargs={'none_stop': True})
    bot_thread.daemon = True
    bot_thread.start()
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    port = int(os.getenv("PORT", 8080))
    print(f"üåê –ó–∞–ø—É—Å–∫–∞—é Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port)
